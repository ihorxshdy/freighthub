"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–∞–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

from database.models import (
    get_user_by_telegram_id, get_driver_vehicles, add_driver_vehicle,
    delete_driver_vehicle, set_primary_vehicle
)
from bot.config import TRUCK_CATEGORIES, get_truck_display_name
from bot.keyboards import get_driver_menu

router = Router()

class VehicleStates(StatesGroup):
    choosing_vehicle_category = State()
    choosing_vehicle_subtype = State()
    choosing_vehicle_final = State()

@router.message(F.text == "üöó –ú–æ–∏ –º–∞—à–∏–Ω—ã")
async def my_vehicles(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è"""
    if not message.from_user:
        return
        
    user = await get_user_by_telegram_id(message.from_user.id)
    
    if not user or user['role'] != 'driver':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º!")
        return
    
    vehicles = await get_driver_vehicles(user['id'])
    
    if not vehicles:
        # –£ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç –º–∞—à–∏–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_vehicle")]
        ])
        
        await message.answer(
            "üöó **–ú–æ–∏ –º–∞—à–∏–Ω—ã**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏!",
            reply_markup=keyboard
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    response = "üöó **–ú–æ–∏ –º–∞—à–∏–Ω—ã:**\n\n"
    
    buttons = []
    for vehicle in vehicles:
        truck_name = get_truck_display_name(vehicle['truck_type'])
        primary_mark = "‚≠ê " if vehicle['is_primary'] else ""
        
        response += f"{primary_mark}{truck_name}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        truck_buttons = []
        if not vehicle['is_primary'] and len(vehicles) > 1:
            truck_buttons.append(
                InlineKeyboardButton(
                    text="‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π", 
                    callback_data=f"set_primary_{vehicle['truck_type']}"
                )
            )
        
        truck_buttons.append(
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"delete_vehicle_{vehicle['truck_type']}"
            )
        )
        
        buttons.extend([truck_buttons])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–∞—à–∏–Ω—É", callback_data="add_vehicle")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if vehicles:
        response += f"\nüí° –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—à–∏–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–æ–π ‚≠ê\n"
        response += "–ü–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—à–∏–Ω–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å."
    
    await message.answer(response, reply_markup=keyboard)

@router.callback_query(F.data == "add_vehicle")
async def add_vehicle_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω
    category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category_info['name'], callback_data=f"vehicle_category_{category_id}")]
        for category_id, category_info in TRUCK_CATEGORIES.items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_vehicles")]])
    
    await callback.message.edit_text(
        "üöó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:",
        reply_markup=category_keyboard
    )
    
    await state.set_state(VehicleStates.choosing_vehicle_category)

@router.callback_query(StateFilter(VehicleStates.choosing_vehicle_category), F.data.startswith("vehicle_category_"))
async def vehicle_category_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω—ã"""
    category_id = callback.data.split("_")[2]
    category_info = TRUCK_CATEGORIES[category_id]
    
    await state.update_data(vehicle_category=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–∏–ø–∞–º–∏
    subtype_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=subtype_name, callback_data=f"vehicle_subtype_{category_id}_{subtype_id}")]
        for subtype_id, subtype_name in category_info['subtypes'].items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="add_vehicle")]])
    
    await callback.message.edit_text(
        f"üöó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã**\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
        reply_markup=subtype_keyboard
    )
    
    await state.set_state(VehicleStates.choosing_vehicle_subtype)

@router.callback_query(StateFilter(VehicleStates.choosing_vehicle_subtype), F.data.startswith("vehicle_subtype_"))
async def vehicle_subtype_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã"""
    parts = callback.data.split("_")
    category_id = parts[2]
    subtype_id = "_".join(parts[3:])
    
    category_info = TRUCK_CATEGORIES[category_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏
    if 'sub_subtypes' in category_info and subtype_id in category_info['sub_subtypes']:
        # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏ (–¥–ª—è –ì–∞–∑–µ–ª–∏)
        await state.update_data(vehicle_subtype=subtype_id)
        
        sub_subtypes = category_info['sub_subtypes'][subtype_id]
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sub_subtype_name, callback_data=f"vehicle_final_{category_id}_{subtype_id}_{sub_subtype_id}")]
            for sub_subtype_id, sub_subtype_name in sub_subtypes.items()
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vehicle_category_{category_id}")]])
        
        subtype_name = category_info['subtypes'][subtype_id]
        await callback.message.edit_text(
            f"üöó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã**\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n"
            f"–¢–∏–ø: {subtype_name}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:",
            reply_markup=final_keyboard
        )
        
        await state.set_state(VehicleStates.choosing_vehicle_final)
    else:
        # –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        await add_vehicle_final(callback, state, subtype_id)

@router.callback_query(StateFilter(VehicleStates.choosing_vehicle_final), F.data.startswith("vehicle_final_"))
async def vehicle_final_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã"""
    parts = callback.data.split("_")
    final_id = parts[-1]
    
    # –ò—â–µ–º –ø–æ–ª–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã
    for truck_key in get_truck_display_name.__globals__['TRUCK_TYPES'].keys():
        if truck_key.endswith(final_id):
            final_id = truck_key
            break
    
    await add_vehicle_final(callback, state, final_id)

async def add_vehicle_final(callback: CallbackQuery, state: FSMContext, truck_type: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    user = await get_user_by_telegram_id(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
    existing_vehicles = await get_driver_vehicles(user['id'])
    is_primary = len(existing_vehicles) == 0  # –ü–µ—Ä–≤–∞—è –º–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
    success = await add_driver_vehicle(user['id'], truck_type, is_primary)
    
    if success:
        truck_name = get_truck_display_name(truck_type)
        primary_text = " (–æ—Å–Ω–æ–≤–Ω–∞—è)" if is_primary else ""
        
        await callback.message.edit_text(
            f"‚úÖ **–ú–∞—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"üöó {truck_name}{primary_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É —Ç–∏–ø—É –º–∞—à–∏–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ú–æ–∏ –º–∞—à–∏–Ω—ã", callback_data="back_to_vehicles")]
            ])
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "–≠—Ç–∞ –º–∞—à–∏–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ú–æ–∏ –º–∞—à–∏–Ω—ã", callback_data="back_to_vehicles")]
            ])
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("set_primary_"))
async def set_primary_vehicle_handler(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—à–∏–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é"""
    truck_type = callback.data.replace("set_primary_", "")
    user = await get_user_by_telegram_id(callback.from_user.id)
    
    await set_primary_vehicle(user['id'], truck_type)
    
    truck_name = get_truck_display_name(truck_type)
    await callback.answer(f"‚≠ê {truck_name} —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–∞—è –º–∞—à–∏–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    await show_vehicles_list(callback.message, user['id'])

@router.callback_query(F.data.startswith("delete_vehicle_"))
async def delete_vehicle_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É"""
    truck_type = callback.data.replace("delete_vehicle_", "")
    user = await get_user_by_telegram_id(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏ —ç—Ç–æ –º–∞—à–∏–Ω–∞
    vehicles = await get_driver_vehicles(user['id'])
    if len(vehicles) <= 1:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É!")
        return
    
    await delete_driver_vehicle(user['id'], truck_type)
    
    truck_name = get_truck_display_name(truck_type)
    await callback.answer(f"üóëÔ∏è {truck_name} —É–¥–∞–ª–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    await show_vehicles_list(callback.message, user['id'])

@router.callback_query(F.data == "back_to_vehicles")
async def back_to_vehicles(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—à–∏–Ω"""
    user = await get_user_by_telegram_id(callback.from_user.id)
    await show_vehicles_list(callback.message, user['id'])

async def show_vehicles_list(message, driver_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –≤–æ–¥–∏—Ç–µ–ª—è"""
    vehicles = await get_driver_vehicles(driver_id)
    
    if not vehicles:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_vehicle")]
        ])
        
        await message.edit_text(
            "üöó **–ú–æ–∏ –º–∞—à–∏–Ω—ã**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏!",
            reply_markup=keyboard
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
    response = "üöó **–ú–æ–∏ –º–∞—à–∏–Ω—ã:**\n\n"
    
    buttons = []
    for vehicle in vehicles:
        truck_name = get_truck_display_name(vehicle['truck_type'])
        primary_mark = "‚≠ê " if vehicle['is_primary'] else ""
        
        response += f"{primary_mark}{truck_name}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
        truck_buttons = []
        if not vehicle['is_primary'] and len(vehicles) > 1:
            truck_buttons.append(
                InlineKeyboardButton(
                    text="‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π", 
                    callback_data=f"set_primary_{vehicle['truck_type']}"
                )
            )
        
        if len(vehicles) > 1:  # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –º–∞—à–∏–Ω—ã
            truck_buttons.append(
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"delete_vehicle_{vehicle['truck_type']}"
                )
            )
        
        if truck_buttons:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            buttons.extend([truck_buttons])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–∞—à–∏–Ω—É", callback_data="add_vehicle")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if vehicles:
        response += f"\nüí° –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—à–∏–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–æ–π ‚≠ê\n"
        response += "–ü–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—à–∏–Ω–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å."
    
    await message.edit_text(response, reply_markup=keyboard)