from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import asyncio
import aiosqlite
import logging

from database.models import (
    get_user_by_telegram_id, create_order, get_drivers_by_truck_type_multiple, 
    get_order_by_id, create_bid, get_bids_for_order, complete_order,
    save_order_message, get_order_message, get_driver_messages_for_order
)
from bot.config import TRUCK_TYPES, TRUCK_CATEGORIES, AUCTION_DURATION, DB_PATH, get_truck_display_name
from utils.message_formatter import format_order_message, format_driver_notification

router = Router()

class OrderStates(StatesGroup):
    choosing_truck_category = State()
    choosing_truck_subtype = State() 
    choosing_truck_final = State()
    entering_order_details = State()

class BidStates(StatesGroup):
    entering_bid = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
active_auctions = {}

@router.message(F.text == "üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_order_creation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if not message.from_user:
        return
        
    user = await get_user_by_telegram_id(message.from_user.id)
    
    if not user or user['role'] != 'customer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_order = {
        'id': '...',
        'truck_type': '–ù–µ –≤—ã–±—Ä–∞–Ω',
        'cargo_description': '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è...',
        'pickup_address': None,
        'pickup_time': None,
        'delivery_address': None,
        'delivery_time': None,
        'created_at': datetime.now().isoformat()
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω
    category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category_info['name'], callback_data=f"order_category_{category_id}")]
        for category_id, category_info in TRUCK_CATEGORIES.items()
    ])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    message_text, _ = format_order_message(temp_order, stage="creating")
    message_text += f"\n\nÔøΩ **–®–∞–≥ 1/2: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã**"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    sent_message = await message.answer(message_text, reply_markup=category_keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        order_message_id=sent_message.message_id,
        order_chat_id=sent_message.chat.id
    )
    
    await state.set_state(OrderStates.choosing_truck_category)

@router.callback_query(StateFilter(OrderStates.choosing_truck_category), F.data.startswith("order_category_"))
async def order_category_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏"""
    if not callback.data:
        return
        
    category_id = callback.data.split("_")[2]
    category_info = TRUCK_CATEGORIES[category_id]
    
    await state.update_data(order_truck_category=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–∏–ø–∞–º–∏
    subtype_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=subtype_name, callback_data=f"order_subtype_{category_id}_{subtype_id}")]
        for subtype_id, subtype_name in category_info['subtypes'].items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back_to_categories")]])
    
    await callback.message.edit_text(
        f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1/2**\n\n"
        f"üöö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
        reply_markup=subtype_keyboard
    )
    
    await state.set_state(OrderStates.choosing_truck_subtype)

@router.callback_query(StateFilter(OrderStates.choosing_truck_subtype), F.data.startswith("order_subtype_"))
async def order_subtype_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏"""
    parts = callback.data.split("_")
    # –§–æ—Ä–º–∞—Ç: order_subtype_category_subtype_id
    # –≥–¥–µ subtype_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _ –∏ category prefix
    category_id = parts[2]  # –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç
    # subtype_id - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
    subtype_id = "_".join(parts[3:])
    
    print(f"DEBUG: order_subtype_chosen - callback_data: {callback.data}")
    print(f"DEBUG: parts: {parts}")
    print(f"DEBUG: category_id: {category_id}, subtype_id: {subtype_id}")
    
    category_info = TRUCK_CATEGORIES[category_id]
    print(f"DEBUG: category_info: {category_info}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏
    print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ sub_subtypes:")
    print(f"DEBUG: category_id in TRUCK_CATEGORIES: {category_id in TRUCK_CATEGORIES}")
    print(f"DEBUG: 'sub_subtypes' in category_info: {'sub_subtypes' in category_info}")
    print(f"DEBUG: subtype_id in category_info['sub_subtypes']: {subtype_id in category_info.get('sub_subtypes', {})}")
    
    if category_id in TRUCK_CATEGORIES and 'sub_subtypes' in category_info and subtype_id in category_info['sub_subtypes']:
        # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏ (–¥–ª—è –ì–∞–∑–µ–ª–∏)
        print(f"DEBUG: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –≤—ã–±–æ—Ä—É –¥–ª—è {subtype_id}")
        await state.update_data(order_truck_subtype=subtype_id)
        
        sub_subtypes = category_info['sub_subtypes'][subtype_id]
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sub_subtype_name, callback_data=f"order_final_{category_id}_{subtype_id}_{sub_subtype_id}")]
            for sub_subtype_id, sub_subtype_name in sub_subtypes.items()
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"order_back_to_subtypes_{category_id}")]])
        
        subtype_name = category_info['subtypes'][subtype_id]
        await callback.message.edit_text(
            f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1/2**\n\n"
            f"üöö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n"
            f"–¢–∏–ø: {subtype_name}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:",
            reply_markup=final_keyboard
        )
        
        await state.set_state(OrderStates.choosing_truck_final)
    else:
        # –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (–¥–ª—è –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–∞ –∏ –î–ª–∏–Ω–Ω–æ–º–µ—Ä–∞)
        print(f"DEBUG: –í—ã–±—Ä–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã: {subtype_id}")
        await state.update_data(truck_type=subtype_id)
        
        truck_name = get_truck_display_name(subtype_id)
        print(f"DEBUG: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: {truck_name}")
        await callback.message.edit_text(
            f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 2/2**\n\n"
            f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n\n"
            f"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            f"‚Ä¢ –ß—Ç–æ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å (–≥—Ä—É–∑, –≤–µ—Å, —Ä–∞–∑–º–µ—Ä—ã)\n"
            f"‚Ä¢ –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å (–∞–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏)\n"
            f"‚Ä¢ –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å (–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏)\n"
            f"‚Ä¢ –í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"–ü–µ—Ä–µ–≤–µ–∑—Ç–∏ –º–µ–±–µ–ª—å (–¥–∏–≤–∞–Ω + —à–∫–∞—Ñ) –ø—Ä–∏–º–µ—Ä–Ω–æ 500–∫–≥.\n"
            f"–ó–∞–±—Ä–∞—Ç—å: —É–ª. –õ–µ–Ω–∏–Ω–∞ 15, –ú–æ—Å–∫–≤–∞, –∑–∞–≤—Ç—Ä–∞ –≤ 10:00\n"
            f"–î–æ—Å—Ç–∞–≤–∏—Ç—å: —É–ª. –ú–∏—Ä–∞ 22, –ü–æ–¥–æ–ª—å—Å–∫, –¥–æ 15:00\n"
            f"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–≥—Ä—É–∑–∫–æ–π."
        )
        
        await state.set_state(OrderStates.entering_order_details)

@router.callback_query(StateFilter(OrderStates.choosing_truck_final), F.data.startswith("order_final_"))
async def order_final_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–∞—à–∏–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏"""
    parts = callback.data.split("_")
    # –§–æ—Ä–º–∞—Ç: order_final_category_subtype_id_final_type_id
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä gazel_closed_10m3)
    final_id = parts[-1]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    # –ù–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–π ID, –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —á–∞—Å—Ç—å
    # –ò—â–µ–º –≤ TRUCK_TYPES –ø–æ –∫–ª—é—á—É –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ final_id
    for truck_key in TRUCK_TYPES.keys():
        if truck_key.endswith(final_id):
            final_id = truck_key
            break
    
    print(f"DEBUG: order_final_chosen - callback_data: {callback.data}")
    print(f"DEBUG: parts: {parts}")
    print(f"DEBUG: –í—ã–±—Ä–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã: {final_id}")
    await state.update_data(truck_type=final_id)
    
    truck_name = get_truck_display_name(final_id)
    print(f"DEBUG: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è (–ì–∞–∑–µ–ª—å): {truck_name}")
    await callback.message.edit_text(
        f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 2/2**\n\n"
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n\n"
        f"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        f"‚Ä¢ –ß—Ç–æ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å (–≥—Ä—É–∑, –≤–µ—Å, —Ä–∞–∑–º–µ—Ä—ã)\n"
        f"‚Ä¢ –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å (–∞–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏)\n"
        f"‚Ä¢ –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å (–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏)\n"
        f"‚Ä¢ –í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n"
        f"–ü–µ—Ä–µ–≤–µ–∑—Ç–∏ –º–µ–±–µ–ª—å (–¥–∏–≤–∞–Ω + —à–∫–∞—Ñ) –ø—Ä–∏–º–µ—Ä–Ω–æ 500–∫–≥.\n"
        f"–ó–∞–±—Ä–∞—Ç—å: —É–ª. –õ–µ–Ω–∏–Ω–∞ 15, –ú–æ—Å–∫–≤–∞, –∑–∞–≤—Ç—Ä–∞ –≤ 10:00\n"
        f"–î–æ—Å—Ç–∞–≤–∏—Ç—å: —É–ª. –ú–∏—Ä–∞ 22, –ü–æ–¥–æ–ª—å—Å–∫, –¥–æ 15:00\n"
        f"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–≥—Ä—É–∑–∫–æ–π."
    )
    
    await state.set_state(OrderStates.entering_order_details)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –¥–ª—è –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "order_back_to_categories")
async def order_back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏"""
    category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category_info['name'], callback_data=f"order_category_{category_id}")]
        for category_id, category_info in TRUCK_CATEGORIES.items()
    ])
    
    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1/2**\n\n"
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏:",
        reply_markup=category_keyboard
    )
    
    await state.set_state(OrderStates.choosing_truck_category)

@router.callback_query(F.data.startswith("order_back_to_subtypes_"))
async def order_back_to_subtypes(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—Ç–∏–ø–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    category_id = callback.data.split("_")[4]
    category_info = TRUCK_CATEGORIES[category_id]
    
    subtype_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=subtype_name, callback_data=f"order_subtype_{category_id}_{subtype_id}")]
        for subtype_id, subtype_name in category_info['subtypes'].items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="order_back_to_categories")]])
    
    await callback.message.edit_text(
        f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - —à–∞–≥ 1/2**\n\n"
        f"üöö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
        reply_markup=subtype_keyboard
    )
    
    await state.set_state(OrderStates.choosing_truck_subtype)

@router.message(StateFilter(OrderStates.entering_order_details), F.text)
async def order_details_received(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    if not message.text or not message.from_user:
        return
        
    order_description = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
    if len(order_description) < 10:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n\n"
            "‚Ä¢ –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–∑–∏—Ç—å\n"
            "‚Ä¢ –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å\n"
        )
        return
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã, –∞ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if 'truck_type' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –º–∞—à–∏–Ω—ã –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ truck_type —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω–µ—á–Ω—ã–º —Ç–∏–ø–æ–º –∏–∑ TRUCK_TYPES
    truck_type = data['truck_type']
    if truck_type not in TRUCK_TYPES:
        print(f"DEBUG: truck_type '{truck_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TRUCK_TYPES. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å...")
        
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–ø –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if truck_type in TRUCK_CATEGORIES:
            category_info = TRUCK_CATEGORIES[truck_type]
            subtypes = category_info.get('subtypes', {})
            if subtypes:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–¥—Ç–∏–ø
                first_subtype = list(subtypes.keys())[0]
                print(f"DEBUG: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {truck_type} -> {first_subtype}")
                data['truck_type'] = first_subtype
                truck_type = first_subtype
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
        if truck_type not in TRUCK_TYPES:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å truck_type '{truck_type}'")
            print(f"DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {list(TRUCK_TYPES.keys())}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—à–∏–Ω—ã '{truck_type}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
    
    user = await get_user_by_telegram_id(message.from_user.id)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (10 –º–∏–Ω—É—Ç)
    from datetime import datetime, timedelta
    expires_at = datetime.now() + timedelta(seconds=AUCTION_DURATION)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —Ç–∏–ø–æ–º –º–∞—à–∏–Ω—ã: {data['truck_type']}")
    truck_name = get_truck_display_name(data['truck_type'])
    print(f"DEBUG: –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {truck_name}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    order_message_id = data.get('order_message_id')
    order_chat_id = data.get('order_chat_id')
    
    initial_text = (
        f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...\n\n"
        f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
        f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n{order_description}\n\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."
    )
    
    if order_message_id and order_chat_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.edit_message_text(
                chat_id=order_chat_id,
                message_id=order_message_id,
                text=initial_text
            )
            print(f"DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {order_message_id}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_message = await message.answer(initial_text)
            order_message_id = status_message.message_id
            order_chat_id = status_message.chat.id
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        status_message = await message.answer(initial_text)
        order_message_id = status_message.message_id
        order_chat_id = status_message.chat.id
    
    try:
        order_id = await create_order(
            customer_id=user['id'],
            truck_type=data['truck_type'],
            cargo_description=order_description,
            delivery_address="–£–∫–∞–∑–∞–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
            expires_at=expires_at.isoformat(),
            pickup_address="–£–∫–∞–∑–∞–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
            pickup_time="–£–∫–∞–∑–∞–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
            delivery_time="–£–∫–∞–∑–∞–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
        await bot.edit_message_text(
            chat_id=order_chat_id,
            message_id=order_message_id,
            text=f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º!\n\n"
                 f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
                 f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                 f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ:\n{order_description}\n\n"
                 f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∞—á—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {AUCTION_DURATION // 60} –º–∏–Ω—É—Ç\n"
                 f"üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π..."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤–æ–¥–∏—Ç–µ–ª—è–º
        drivers_count = await notify_drivers_about_order(bot, order_id, data['truck_type'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        await bot.edit_message_text(
            chat_id=order_chat_id,
            message_id=order_message_id,
            text=f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º!\n\n"
                 f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
                 f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                 f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ:\n{order_description}\n\n"
                 f"üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\n"
                 f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∞—á—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {AUCTION_DURATION // 60} –º–∏–Ω—É—Ç\n"
                 f"üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π..."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        await save_order_message(
            order_id=order_id,
            user_id=user['id'],
            chat_id=order_chat_id,
            message_id=order_message_id,
            message_type='customer'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
        import asyncio
        asyncio.create_task(auction_timer(bot, order_id))
        
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
    
    await state.clear()



async def notify_drivers_about_order(bot: Bot, order_id: int, truck_type: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    order = await get_order_by_id(order_id)
    drivers = await get_drivers_by_truck_type_multiple(truck_type)
    
    if not drivers:
        return 0
    
    truck_name = get_truck_display_name(truck_type)
    
    bid_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"bid_{order_id}")]
    ])
    
    message_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}\n\n"
        f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n{order['cargo_description']}\n\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {AUCTION_DURATION // 60} –º–∏–Ω—É—Ç"
    )
    
    sent_count = 0
    for driver in drivers:
        try:
            sent_message = await bot.send_message(
                chat_id=driver['telegram_id'],
                text=message_text,
                reply_markup=bid_keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
            await save_order_message(
                order_id=order_id,
                user_id=driver['id'],
                chat_id=driver['telegram_id'],
                message_id=sent_message.message_id,
                message_type='driver_notification'
            )
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é {driver['telegram_id']}: {e}")
    
    return sent_count

@router.callback_query(F.data.startswith("bid_"))
async def make_bid_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    order_id = int(callback.data.split("_")[1])
    
    user = await get_user_by_telegram_id(callback.from_user.id)
    
    if not user or user['role'] != 'driver':
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
        return
    
    order = await get_order_by_id(order_id)
    if not order or order['status'] != 'active':
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!")
        return
    
    truck_name = get_truck_display_name(order['truck_type'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    try:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=f"üöö –ó–∞—è–≤–∫–∞ #{order_id}\n\n"
                 f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                 f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n{order['cargo_description']}\n\n"
                 "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É (–≤ —Ä—É–±–ª—è—Ö):"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(
        order_id=order_id, 
        message_id=callback.message.message_id,
        chat_id=callback.message.chat.id
    )
    
    await state.set_state(BidStates.entering_bid)

@router.message(StateFilter(BidStates.entering_bid), F.text)
async def bid_price_received(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        price = float(message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
        data = await state.get_data()
        order_id = data['order_id']
        message_id = data.get('message_id')
        chat_id = data.get('chat_id')
        
        user = await get_user_by_telegram_id(message.from_user.id)
        order = await get_order_by_id(order_id)
        
        await create_bid(order_id, user['id'], price)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if message_id and chat_id:
            truck_name = get_truck_display_name(order['truck_type'])
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                         f"üöö –ó–∞—è–≤–∫–∞ #{order_id}\n"
                         f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                         f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n{order['cargo_description']}\n\n"
                         f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                         f"‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: {e}")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
                await message.answer(
                    f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞."
                )
        else:
            # Fallback - –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await message.answer(
                f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ü–µ –∞—É–∫—Ü–∏–æ–Ω–∞."
            )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000):"
        )
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    
    await state.clear()

async def auction_timer(bot: Bot, order_id: int):
    """–¢–∞–π–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞"""
    # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
    await asyncio.sleep(AUCTION_DURATION)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    bids = await get_bids_for_order(order_id)
    order = await get_order_by_id(order_id)
    
    if not order or order['status'] != 'active':
        return
    
    if not bids:
        # –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        await complete_order(order_id, None, None, 'no_offers')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        order_message_info = await get_order_message(order_id, 'customer')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        if order_message_info:
            try:
                truck_name = get_truck_display_name(order['truck_type'])
                await bot.edit_message_text(
                    chat_id=order_message_info['chat_id'],
                    message_id=order_message_info['message_id'],
                    text=f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–∫—Ä—ã—Ç–∞\n\n"
                         f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                         f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {order['cargo_description']}\n\n"
                         f"‚è∞ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                         f"üîÑ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
                         f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
                async with aiosqlite.connect(DB_PATH) as db:
                    async with db.execute("SELECT telegram_id FROM users WHERE id = ?", (order['customer_id'],)) as cursor:
                        customer_row = await cursor.fetchone()
                        if customer_row:
                            try:
                                await bot.send_message(
                                    chat_id=customer_row[0],
                                    text=f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –∑–∞—è–≤–∫—É #{order_id} –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n\n"
                                         f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è."
                                )
                            except:
                                pass
            
    else:
        # –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        winning_bid = bids[0]  # –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ü–µ–Ω–µ
        
        await complete_order(
            order_id, 
            winning_bid['driver_id'], 
            winning_bid['price'], 
            'completed'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
        await notify_customer_about_winner(bot, order, winning_bid)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
        await notify_drivers_about_results(bot, order_id, bids, winning_bid)

async def notify_customer_about_winner(bot: Bot, order: dict, winning_bid: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–∞"""
    order_id = order['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
    order_message_info = await get_order_message(order_id, 'customer')
    
    truck_name = get_truck_display_name(order['truck_type'])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bids = await get_bids_for_order(order_id)
    bids_count = len(bids) if bids else 0
    
    message_text = (
        f"üéâ –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
        f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {order['cargo_description']}\n\n"
        f"üèÜ –í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {winning_bid['driver_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üí∞ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Ü–µ–Ω–∞: {winning_bid['price']} —Ä—É–±.\n"
        f"üë• –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {bids_count}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {winning_bid['driver_phone']}\n\n"
        f"‚úÖ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞."
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
    if order_message_info:
        try:
            await bot.edit_message_text(
                chat_id=order_message_info['chat_id'],
                message_id=order_message_info['message_id'],
                text=message_text
            )
            return  # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {e}")
    
    # Fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∑–∞–∫–∞–∑—á–∏–∫–∞
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT telegram_id FROM users WHERE id = ?", (order['customer_id'],)) as cursor:
                customer_row = await cursor.fetchone()
                if customer_row:
                    customer_telegram_id = customer_row[0]
                    await bot.send_message(
                        chat_id=customer_telegram_id,
                        text=message_text
                    )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")

async def notify_drivers_about_results(bot: Bot, order_id: int, all_bids: list, winning_bid: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
    order = await get_order_by_id(order_id)
    customer_info = None
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT phone_number, name FROM users WHERE id = ?", (order['customer_id'],)) as cursor:
            customer_row = await cursor.fetchone()
            if customer_row:
                customer_info = {
                    'phone': customer_row[0],
                    'name': customer_row[1] or '–ó–∞–∫–∞–∑—á–∏–∫'
                }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
    driver_messages = await get_driver_messages_for_order(order_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ telegram_id –≤–æ–¥–∏—Ç–µ–ª—è
    messages_by_telegram_id = {msg['telegram_id']: msg for msg in driver_messages}
    
    for bid in all_bids:
        driver_telegram_id = bid['driver_telegram_id']
        
        if bid['driver_id'] == winning_bid['driver_id']:
            # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
            truck_name = get_truck_display_name(order['truck_type'])
            message_text = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∑–∞—è–≤–∫—É #{order_id}\n\n"
                f"üöö –¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n"
                f"ÔøΩ –û–ø–∏—Å–∞–Ω–∏–µ: {order['cargo_description']}\n"
                f"ÔøΩ –í–∞—à–∞ —Ü–µ–Ω–∞: {bid['price']} —Ä—É–±.\n\n"
                f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer_info['name'] if customer_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {customer_info['phone'] if customer_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        else:
            # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π
            message_text = (
                f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                f"üí∞ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {bid['price']} —Ä—É–±.\n"
                f"üèÜ –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Ü–µ–Ω–∞: {winning_bid['price']} —Ä—É–±.\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–æ–π."
            )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if driver_telegram_id in messages_by_telegram_id:
            msg_info = messages_by_telegram_id[driver_telegram_id]
            try:
                await bot.edit_message_text(
                    chat_id=msg_info['chat_id'],
                    message_id=msg_info['message_id'],
                    text=message_text
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_telegram_id}: {e}")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.send_message(
                        chat_id=driver_telegram_id,
                        text=message_text
                    )
                except Exception as e2:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}: {e2}")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await bot.send_message(
                    chat_id=driver_telegram_id,
                    text=message_text
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}: {e}")