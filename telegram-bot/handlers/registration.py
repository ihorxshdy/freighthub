from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models import get_user_by_telegram_id, create_user
from bot.config import TRUCK_TYPES, USER_ROLES, TRUCK_CATEGORIES, get_truck_display_name
from bot.keyboards import get_webapp_menu
from bot.webapp_config import WEBAPP_URL

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    choosing_role = State()
    choosing_truck_category = State()
    choosing_truck_subtype = State()
    choosing_truck_final = State()

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if not message.from_user:
        return
        
    user = await get_user_by_telegram_id(message.from_user.id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        role_emoji = "üë§" if user['role'] == 'customer' else "üöö"
        role_name = "–ó–∞–∫–∞–∑—á–∏–∫" if user['role'] == 'customer' else "–í–æ–¥–∏—Ç–µ–ª—å"
        
        await message.answer(
            f"{role_emoji} **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name'] or role_name}!**\n\n"
            f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {role_name}\n\n"
            "üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
            "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
            "‚ÑπÔ∏è –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
            reply_markup=get_webapp_menu()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FreightHub!**\n\n"
            "üöö *–°–µ—Ä–≤–∏—Å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è*\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=phone_keyboard
        )
        await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(StateFilter(RegistrationStates.waiting_for_phone), F.contact)
async def phone_received(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ó–∞–∫–∞–∑—á–∏–∫", callback_data="role_customer"),
            InlineKeyboardButton(text="üöö –í–æ–¥–∏—Ç–µ–ª—å", callback_data="role_driver")
        ]
    ])
    
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:\n\n"
        "üë§ **–ó–∞–∫–∞–∑—á–∏–∫** - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É\n"
        "üöö **–í–æ–¥–∏—Ç–µ–ª—å** - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞—è–≤–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ",
        reply_markup=keyboard
    )
    await state.set_state(RegistrationStates.choosing_role)

@router.callback_query(StateFilter(RegistrationStates.choosing_role), F.data.startswith("role_"))
async def role_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.split("_")[1]  # customer –∏–ª–∏ driver
    await state.update_data(role=role)
    
    if role == 'driver':
        # –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω
        category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=category_info['name'], callback_data=f"category_{category_id}")]
            for category_id, category_info in TRUCK_CATEGORIES.items()
        ])
        
        await callback.message.edit_text(
            "üöö –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: **–í–æ–¥–∏—Ç–µ–ª—å**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:",
            reply_markup=category_keyboard
        )
        await state.set_state(RegistrationStates.choosing_truck_category)
    else:
        # –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        data = await state.get_data()
        
        try:
            await create_user(
                telegram_id=callback.from_user.id,
                phone_number=data['phone_number'],
                role=role,
                truck_type=None,
                name=callback.from_user.full_name or "–ó–∞–∫–∞–∑—á–∏–∫"
            )
            
            await callback.message.edit_text(
                "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"–†–æ–ª—å: –ó–∞–∫–∞–∑—á–∏–∫\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!"
            )
            
            await callback.message.answer(
                "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n\n"
                "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç",
                reply_markup=get_webapp_menu()
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
        
        await state.clear()

@router.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' (deprecated)"""

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not message.from_user:
        return
        
    user = await get_user_by_telegram_id(message.from_user.id)
    
    if user:
        # –£–¥–∞–ª–∏–ª–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        if user['role'] == 'customer':
            await message.answer(
                f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name'] or '–∑–∞–∫–∞–∑—á–∏–∫'}!\n\n"
                "üì¶ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É\n"
                "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_customer_menu()
            )
        else:  # driver
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
            from database.models import get_driver_vehicles
            vehicles = await get_driver_vehicles(user['id'])
            
            if vehicles:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
                vehicles_text = ""
                for vehicle in vehicles:
                    truck_name = get_truck_display_name(vehicle['truck_type'])
                    primary_mark = "‚≠ê " if vehicle['is_primary'] else "‚Ä¢ "
                    vehicles_text += f"{primary_mark}{truck_name}\n"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
                if user['truck_type']:
                    vehicles_text = f"‚Ä¢ {get_truck_display_name(user['truck_type'])}\n"
                else:
                    vehicles_text = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω\n"
            
            await message.answer(
                f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name'] or '–≤–æ–¥–∏—Ç–µ–ª—å'}!\n\n"
                f"üöö –í–∞—à–∏ –º–∞—à–∏–Ω—ã:\n{vehicles_text}\n"
                "üèÜ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
                "üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
                "üöó –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_driver_menu()
            )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –ó–∞–∫–∞–∑—á–∏–∫", callback_data="role_customer"),
                InlineKeyboardButton(text="üöö –í–æ–¥–∏—Ç–µ–ª—å", callback_data="role_driver")
            ]
        ])
        
        await message.answer(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FreightHub!** üéâ\n"
            "*–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫*\n\n"
            "üîπ **–î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:**\n"
            "üì¶ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –≥—Ä—É–∑–∞\n"
            "üí∞ –í–æ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç —Å–≤–æ–∏ —Ü–µ–Ω—ã –∑–∞ 5 –º–∏–Ω—É—Ç\n"
            "üèÜ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "üì± –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n\n"
            "üîπ **–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:**\n" 
            "üîî –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n"
            "‚ö° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±—ã—Å—Ç—Ä—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–∞—Ö\n"
            "üíµ –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π\n"
            "ÔøΩ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏\n\n"
            "üëã **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**",
            reply_markup=keyboard
        )
        await state.set_state(RegistrationStates.choosing_role)

@router.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' (deprecated - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

@router.callback_query(StateFilter(RegistrationStates.choosing_truck_category), F.data.startswith("category_"))
async def truck_category_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—à–∏–Ω—ã"""
    category_id = callback.data.split("_")[1]
    category_info = TRUCK_CATEGORIES[category_id]
    
    await state.update_data(truck_category=category_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–∏–ø–∞–º–∏
    subtype_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=subtype_name, callback_data=f"subtype_{category_id}_{subtype_id}")]
        for subtype_id, subtype_name in category_info['subtypes'].items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")]])
    
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
        reply_markup=subtype_keyboard
    )
    
    await state.set_state(RegistrationStates.choosing_truck_subtype)

@router.callback_query(StateFilter(RegistrationStates.choosing_truck_subtype), F.data.startswith("subtype_"))
async def truck_subtype_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã"""
    parts = callback.data.split("_")
    # –§–æ—Ä–º–∞—Ç: subtype_category_subtype_id
    category_id = parts[1]  # –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
    # subtype_id - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
    subtype_id = "_".join(parts[2:])
    
    print(f"DEBUG: truck_subtype_chosen - callback_data: {callback.data}")
    print(f"DEBUG: parts: {parts}")
    print(f"DEBUG: category_id: {category_id}, subtype_id: {subtype_id}")
    
    category_info = TRUCK_CATEGORIES[category_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏
    if category_id in TRUCK_CATEGORIES and 'sub_subtypes' in category_info and subtype_id in category_info['sub_subtypes']:
        # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—É—Ä–æ–≤–Ω–∏ (–¥–ª—è –ì–∞–∑–µ–ª–∏)
        await state.update_data(truck_subtype=subtype_id)
        
        sub_subtypes = category_info['sub_subtypes'][subtype_id]
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sub_subtype_name, callback_data=f"final_{category_id}_{subtype_id}_{sub_subtype_id}")]
            for sub_subtype_id, sub_subtype_name in sub_subtypes.items()
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_subtypes_{category_id}")]])
        
        subtype_name = category_info['subtypes'][subtype_id]
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n"
            f"–¢–∏–ø: {subtype_name}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:",
            reply_markup=final_keyboard
        )
        
        await state.set_state(RegistrationStates.choosing_truck_final)
    else:
        # –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (–¥–ª—è –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–∞ –∏ –î–ª–∏–Ω–Ω–æ–º–µ—Ä–∞)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º truck_type
        truck_type = subtype_id
        if truck_type in TRUCK_CATEGORIES:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–¥—Ç–∏–ø
            category_info = TRUCK_CATEGORIES[truck_type]
            subtypes = category_info.get('subtypes', {})
            if subtypes:
                truck_type = list(subtypes.keys())[0]
        
        await state.update_data(truck_type=truck_type)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É
        data = await state.get_data()
        truck_name = get_truck_display_name(truck_type)
        
        try:
            await create_user(
                telegram_id=callback.from_user.id,
                phone_number=data['phone_number'],
                role='driver',
                truck_type=truck_type,
                name=callback.from_user.full_name or "–í–æ–¥–∏—Ç–µ–ª—å"
            )
            
            await callback.message.edit_text(
                f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"–†–æ–ª—å: –í–æ–¥–∏—Ç–µ–ª—å\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
                f"–¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!"
            )
            
            await callback.message.answer(
                "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏\n\n"
                "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç",
                reply_markup=get_webapp_menu()
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
        
        await state.clear()

@router.callback_query(StateFilter(RegistrationStates.choosing_truck_final), F.data.startswith("final_"))
async def truck_final_chosen(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–∞—à–∏–Ω—ã (–¥–ª—è –ì–∞–∑–µ–ª–∏)"""
    parts = callback.data.split("_")
    # –§–æ—Ä–º–∞—Ç: final_category_subtype_id_final_type_id
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä gazel_closed_10m3)
    final_id = parts[-1]  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    # –ò—â–µ–º –≤ TRUCK_TYPES –ø–æ –∫–ª—é—á—É –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ final_id
    for truck_key in TRUCK_TYPES.keys():
        if truck_key.endswith(final_id):
            final_id = truck_key
            break
    
    await state.update_data(truck_type=final_id)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É
    data = await state.get_data()
    truck_name = TRUCK_TYPES.get(final_id, final_id)
    
    try:
        await create_user(
            telegram_id=callback.from_user.id,
            phone_number=data['phone_number'],
            role='driver',
            truck_type=final_id,
            name=callback.from_user.full_name or "–í–æ–¥–∏—Ç–µ–ª—å"
        )
        
        await callback.message.edit_text(
            f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–†–æ–ª—å: –í–æ–¥–∏—Ç–µ–ª—å\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
            f"–¢–∏–ø –º–∞—à–∏–Ω—ã: {truck_name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!"
        )
        
        await callback.message.answer(
            "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏\n\n"
            "üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç",
            reply_markup=get_webapp_menu()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category_info['name'], callback_data=f"category_{category_id}")]
        for category_id, category_info in TRUCK_CATEGORIES.items()
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:",
        reply_markup=category_keyboard
    )
    
    await state.set_state(RegistrationStates.choosing_truck_category)

@router.callback_query(F.data.startswith("back_to_subtypes_"))
async def back_to_subtypes(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—Ç–∏–ø–æ–≤"""
    category_id = callback.data.split("_")[3]
    category_info = TRUCK_CATEGORIES[category_id]
    
    subtype_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=subtype_name, callback_data=f"subtype_{category_id}_{subtype_id}")]
        for subtype_id, subtype_name in category_info['subtypes'].items()
    ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")]])
    
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_info['name']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø:",
        reply_markup=subtype_keyboard
    )
    
    await state.set_state(RegistrationStates.choosing_truck_subtype)