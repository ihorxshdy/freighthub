import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from database.models import (
    get_all_users, delete_user_by_telegram_id, delete_all_users, 
    get_user_stats, get_user_by_telegram_id, get_order_by_id
)
from bot.config import TRUCK_TYPES
import aiosqlite
from bot.config import DB_PATH
from datetime import datetime

logger = logging.getLogger(__name__)

router = Router()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [643813567]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id if message.from_user else None
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not user_id or not is_admin(user_id):
        logger.warning(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    logger.info(f"–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="ÔøΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ", callback_data="admin_order_info")],
        [InlineKeyboardButton(text="ÔøΩüóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_clear_all")],
    ])
    
    await message.answer(
        "üõ†Ô∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.message(Command("reset"))
async def reset_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id if message.from_user else None
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reset –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return
        
    user = await get_user_by_telegram_id(user_id)
    if not user:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    stats = await get_user_stats()
    
    await callback.message.edit_text(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üöö –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['drivers_count']}\n"
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: {stats['customers_count']}\n"
        f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {stats['active_orders']}\n\n"
        f"‚è∞ –í—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞: 5 –º–∏–Ω—É—Ç",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
    )

@router.callback_query(F.data == "admin_users_list")
async def show_users_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    users = await get_all_users()
    
    if not users:
        await callback.message.edit_text(
            "üì≠ **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç**\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /start",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        return
    
    text = "üë• **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i, user in enumerate(users[:10], 1):
        role_emoji = "üöö" if user['role'] == 'driver' else "üë§"
        truck_info = f" ({TRUCK_TYPES.get(user['truck_type'], user['truck_type'])[:20]}...)" if user['truck_type'] else ""
        
        text += (
            f"{i}. {role_emoji} {user['name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"   üìû {user['phone_number']}\n"
            f"   üÜî {user['telegram_id']}{truck_info}\n\n"
        )
    
    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    keyboard = []
    if len(users) > 0:
        keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data="admin_clear_all")])
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "admin_clear_all")
async def confirm_clear_all(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    stats = await get_user_stats()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="admin_clear_confirmed")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å **–í–°–ï** —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üöö –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['drivers_count']}\n"
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: {stats['customers_count']}\n\n"
        f"‚ùóÔ∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**\n"
        f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "admin_clear_confirmed")
async def clear_all_confirmed(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    try:
        await delete_all_users()
        await callback.message.edit_text(
            "‚úÖ **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!**\n\n"
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω–∞.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:**\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data.startswith("reset_confirm_"))
async def reset_user_confirmed(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = int(callback.data.split("_")[2])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!", show_alert=True)
        return
    
    try:
        await delete_user_by_telegram_id(user_id)
        await callback.message.edit_text(
            "‚úÖ **–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:**\n\n{str(e)}"
        )

@router.callback_query(F.data == "reset_cancel")
async def reset_cancelled(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    )

@router.callback_query(F.data == "admin_order_info")
async def ask_order_id(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: `5`\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
    )

@router.message(F.text.regexp(r'^\d+$'))
async def show_order_info(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ –Ω–æ–º–µ—Ä—É"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    try:
        order_id = int(message.text)
        
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            async with db.execute('''
                SELECT o.*, 
                       c.name as customer_name, c.phone_number as customer_phone, c.telegram_id as customer_tg_id,
                       d.name as driver_name, d.phone_number as driver_phone, d.telegram_id as driver_tg_id
                FROM orders o
                LEFT JOIN users c ON o.customer_id = c.id
                LEFT JOIN users d ON o.winner_driver_id = d.id
                WHERE o.id = ?
            ''', (order_id,)) as cursor:
                order = await cursor.fetchone()
            
            if not order:
                await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏
            async with db.execute('''
                SELECT b.*, u.name as driver_name, u.phone_number as driver_phone, u.telegram_id as driver_tg_id
                FROM bids b
                JOIN users u ON b.driver_id = u.id
                WHERE b.order_id = ?
                ORDER BY b.created_at ASC
            ''', (order_id,)) as cursor:
                bids = await cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status_emoji = {
                'active': 'üîµ',
                'in_progress': 'üü°',
                'closed': 'üü¢',
                'cancelled': 'üî¥'
            }
            
            status_name = {
                'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                'closed': '–ó–∞–∫—Ä—ã—Ç',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }
            
            text = f"üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_id}**\n\n"
            text += f"**–°—Ç–∞—Ç—É—Å:** {status_emoji.get(order['status'], '‚ö™')} {status_name.get(order['status'], order['status'])}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            text += f"**üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:**\n"
            text += f"–¢–∏–ø –º–∞—à–∏–Ω—ã: {TRUCK_TYPES.get(order['truck_type'], order['truck_type'])}\n"
            text += f"–ì—Ä—É–∑: {order['cargo_description'][:50]}...\n" if len(order['cargo_description']) > 50 else f"–ì—Ä—É–∑: {order['cargo_description']}\n"
            text += f"–û—Ç–∫—É–¥–∞: {order['pickup_address'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"–ö—É–¥–∞: {order['delivery_address']}\n"
            if order['delivery_date']:
                text += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_date']}\n"
            if order['max_price']:
                text += f"–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {order['max_price']} —Ä—É–±.\n"
            text += f"\n**‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:**\n"
            text += f"–°–æ–∑–¥–∞–Ω: {order['created_at']}\n"
            text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {order['expires_at']}\n"
            if order['cancelled_at']:
                text += f"–û—Ç–º–µ–Ω–µ–Ω: {order['cancelled_at']}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ
            text += f"\n**üë§ –ó–∞–∫–∞–∑—á–∏–∫:**\n"
            text += f"–ò–º—è: {order['customer_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone']}\n"
            text += f"Telegram ID: {order['customer_tg_id']}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
            if order['winner_driver_id']:
                text += f"\n**üöö –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:**\n"
                text += f"–ò–º—è: {order['driver_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['driver_phone']}\n"
                text += f"Telegram ID: {order['driver_tg_id']}\n"
                text += f"–¶–µ–Ω–∞: {order['winning_price']} —Ä—É–±.\n"
                
                # –°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if order['status'] == 'in_progress':
                    text += f"\n**‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**\n"
                    text += f"–ó–∞–∫–∞–∑—á–∏–∫: {'‚úÖ –î–∞' if order['customer_confirmed'] else '‚ùå –ù–µ—Ç'}\n"
                    text += f"–í–æ–¥–∏—Ç–µ–ª—å: {'‚úÖ –î–∞' if order['driver_confirmed'] else '‚ùå –ù–µ—Ç'}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–∞—Ö
            if bids:
                text += f"\n**üí∞ –°—Ç–∞–≤–∫–∏ ({len(bids)}):**\n"
                for i, bid in enumerate(bids[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    is_winner = bid['driver_id'] == order['winner_driver_id'] if order['winner_driver_id'] else False
                    winner_mark = " üèÜ" if is_winner else ""
                    text += f"{i}. {bid['driver_name']}{winner_mark}: {bid['price']} —Ä—É–±. ({bid['created_at']})\n"
                
                if len(bids) > 5:
                    text += f"... –∏ –µ—â–µ {len(bids) - 5} —Å—Ç–∞–≤–æ–∫\n"
            else:
                text += f"\n**üí∞ –°—Ç–∞–≤–∫–∏:** –ù–µ—Ç —Å—Ç–∞–≤–æ–∫\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if len(text) > 4096:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    await message.answer(part)
            else:
                await message.answer(text)
                
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="ÔøΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ", callback_data="admin_order_info")],
        [InlineKeyboardButton(text="ÔøΩüóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_clear_all")],
    ])
    
    await callback.message.edit_text(
        "üõ†Ô∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )