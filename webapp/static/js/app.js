// Telegram Web App API
const tg = window.Telegram?.WebApp;
if (tg) {
    tg.expand();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentTab = null;
let currentOrderForBid = null;
let truckTypesMap = {}; // –ú–∞–ø–ø–∏–Ω–≥ ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã

// –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
const TEST_MODE = !tg || !tg.initDataUnsafe?.user;

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const TEST_USER = {
    id: 123456789,
    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    username: 'test_user'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        applyTelegramTheme();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        const telegramUser = TEST_MODE ? TEST_USER : tg.initDataUnsafe.user;
        
        console.log('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', TEST_MODE ? '–¢–ï–°–¢–û–í–´–ô (–±—Ä–∞—É–∑–µ—Ä)' : 'TELEGRAM');
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', telegramUser);
        
        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const user = await fetchUser(telegramUser.id);
        
        if (user) {
            currentUser = user;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('currentUser', JSON.stringify(user));
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', user);
            showMainScreen();
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            const cachedUser = localStorage.getItem('currentUser');
            if (cachedUser) {
                const parsedUser = JSON.parse(cachedUser);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (parsedUser.telegram_id == telegramUser.id) {
                    currentUser = parsedUser;
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞:', parsedUser);
                    showMainScreen();
                    return;
                }
            }
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–Ω–æ –Ω–µ—Ç
            showRegistrationScreen(telegramUser);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// === –¢–ï–ú–ê TELEGRAM ===
function applyTelegramTheme() {
    const root = document.documentElement;
    
    if (tg.themeParams) {
        if (tg.themeParams.bg_color) root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color);
        if (tg.themeParams.text_color) root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color);
        if (tg.themeParams.hint_color) root.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color);
        if (tg.themeParams.link_color) root.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color);
        if (tg.themeParams.button_color) root.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color);
        if (tg.themeParams.button_text_color) root.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color);
        if (tg.themeParams.secondary_bg_color) root.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color);
    }
}

// === API –§–£–ù–ö–¶–ò–ò ===
async function fetchUser(telegramId) {
    const response = await fetch(`/api/user?telegram_id=${telegramId}`);
    if (response.ok) {
        return await response.json();
    }
    return null;
}

async function registerUser(userData) {
    const response = await fetch('/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
    });
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
    
    return await response.json();
}

async function fetchTruckTypes() {
    const response = await fetch('/api/truck-types');
    return await response.json();
}

async function fetchCustomerOrders(telegramId) {
    const response = await fetch(`/api/customer/orders?telegram_id=${telegramId}`);
    return await response.json();
}

async function fetchDriverOrders(telegramId) {
    const response = await fetch(`/api/driver/orders?telegram_id=${telegramId}`);
    return await response.json();
}

async function createOrder(orderData) {
    const response = await fetch(`/api/orders?telegram_id=${currentUser.telegram_id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
    });
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    }
    
    return await response.json();
}

async function createBid(bidData) {
    const response = await fetch(`/api/bids?telegram_id=${currentUser.telegram_id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bidData)
    });
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }
    
    return await response.json();
}

async function fetchOrderBids(orderId) {
    const response = await fetch(`/api/orders/${orderId}/bids`);
    return await response.json();
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(s => s.classList.add('hidden'));
    document.getElementById(screenId).classList.remove('hidden');
}

function showRegistrationScreen(telegramUser) {
    showScreen('registration-screen');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    document.querySelectorAll('.role-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            const role = btn.dataset.role;
            
            try {
                showScreen('loading-screen');
                
                const userData = {
                    telegram_id: telegramUser.id,
                    username: telegramUser.username || '',
                    first_name: telegramUser.first_name || '',
                    last_name: telegramUser.last_name || '',
                    role: role
                };
                
                await registerUser(userData);
                const user = await fetchUser(telegramUser.id);
                currentUser = user;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem('currentUser', JSON.stringify(user));
                console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', user);
                
                showMainScreen();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                showError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                showRegistrationScreen(telegramUser);
            }
        });
    });
}

async function showMainScreen() {
    showScreen('main-screen');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('user-name').textContent = `${currentUser.first_name} ${currentUser.last_name || ''}`.trim();
    const roleText = currentUser.role === 'customer' ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–í–æ–¥–∏—Ç–µ–ª—å';
    const phoneText = currentUser.phone_number ? ` ‚Ä¢ ${currentUser.phone_number}` : '';
    document.getElementById('user-role').textContent = roleText + phoneText;
    document.body.className = `role-${currentUser.role}`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏
    initTabs();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º
    await loadTruckTypes();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    initModals();
}

function initTabs() {
    const tabsNav = document.getElementById('tabs-nav');
    const tabContent = document.getElementById('tab-content');
    
    tabsNav.innerHTML = '';
    tabContent.innerHTML = '';
    
    let tabs = [];
    
    if (currentUser.role === 'customer') {
        tabs = [
            { id: 'searching', label: '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', icon: 'üîç' },
            { id: 'created', label: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ', icon: 'üìù' },
            { id: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', icon: '‚úÖ' }
        ];
    } else {
        tabs = [
            { id: 'open', label: '–û—Ç–∫—Ä—ã—Ç—ã–µ', icon: 'üìã' },
            { id: 'my_bids', label: '–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', icon: 'üí∞' },
            { id: 'won', label: '–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ', icon: 'üèÜ' },
            { id: 'closed', label: '–ó–∞–∫—Ä—ã—Ç—ã–µ', icon: 'üìÅ' }
        ];
    }
    
    tabs.forEach((tab, index) => {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
        const tabBtn = document.createElement('button');
        tabBtn.className = 'tab' + (index === 0 ? ' active' : '');
        tabBtn.dataset.tab = tab.id;
        tabBtn.innerHTML = `${tab.icon} ${tab.label} <span class="tab-badge" id="badge-${tab.id}">0</span>`;
        tabBtn.addEventListener('click', () => switchTab(tab.id));
        tabsNav.appendChild(tabBtn);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
        const tabPane = document.createElement('div');
        tabPane.className = 'tab-pane' + (index === 0 ? ' active' : '');
        tabPane.id = `tab-${tab.id}`;
        tabContent.appendChild(tabPane);
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    currentTab = tabs[0].id;
    loadTabData(currentTab);
}

async function switchTab(tabId) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.tab === tabId);
    });
    
    document.querySelectorAll('.tab-pane').forEach(pane => {
        pane.classList.toggle('active', pane.id === `tab-${tabId}`);
    });
    
    currentTab = tabId;
    await loadTabData(tabId);
}

async function loadTabData(tabId) {
    const tabPane = document.getElementById(`tab-${tabId}`);
    tabPane.innerHTML = '<div class="loading-container"><div class="spinner"></div></div>';
    
    try {
        if (currentUser.role === 'customer') {
            const orders = await fetchCustomerOrders(currentUser.telegram_id);
            renderCustomerOrders(orders[tabId], tabPane, tabId);
            updateBadges(orders);
        } else {
            const orders = await fetchDriverOrders(currentUser.telegram_id);
            renderDriverOrders(orders[tabId], tabPane, tabId);
            updateBadges(orders);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        tabPane.innerHTML = '<div class="empty-state"><div class="empty-icon">‚ùå</div><div class="empty-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div></div>';
    }
}

function updateBadges(orders) {
    Object.keys(orders).forEach(key => {
        const badge = document.getElementById(`badge-${key}`);
        if (badge) {
            const count = orders[key].length;
            badge.textContent = count;
            badge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    });
}

function renderCustomerOrders(orders, container, tabId) {
    if (!orders || orders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì¶</div>
                <div class="empty-title">–ù–µ—Ç –∑–∞—è–≤–æ–∫</div>
                <div class="empty-description">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = orders.map(order => `
        <div class="order-card">
            <div class="order-header">
                <div class="order-number">–ó–∞—è–≤–∫–∞ #${order.id}</div>
                <div class="order-status status-${tabId}">${getStatusLabel(tabId)}</div>
            </div>
            
            <div class="order-route">
                <div class="route-point">
                    <span class="route-icon">üìç</span>
                    <span>${order.pickup_location}</span>
                </div>
                <div class="route-point">
                    <span class="route-icon">üéØ</span>
                    <span>${order.delivery_location}</span>
                </div>
            </div>
            
            <div class="order-description">${order.description}</div>
            
            <div class="order-meta">
                <span>üöõ ${getTruckTypeName(order.truck_type)}</span>
                <span>üìÖ ${formatDate(order.created_at)}</span>
            </div>
            
            ${tabId === 'searching' ? `
                <div class="order-footer">
                    <div class="bids-info">
                        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <span class="bids-count">${order.bids_count || 0}</span>
                        ${order.min_bid_price ? `<br>–û—Ç <span class="min-price">${formatPrice(order.min_bid_price)}</span>` : ''}
                    </div>
                    <button class="btn btn-small btn-primary" onclick="viewOrderBids(${order.id})">
                        –°–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                </div>
            ` : ''}
        </div>
    `).join('');
}

function renderDriverOrders(orders, container, tabId) {
    if (!orders || orders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üöõ</div>
                <div class="empty-title">–ù–µ—Ç –∑–∞—è–≤–æ–∫</div>
                <div class="empty-description">${getEmptyMessage(tabId)}</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = orders.map(order => `
        <div class="order-card">
            <div class="order-header">
                <div class="order-number">–ó–∞—è–≤–∫–∞ #${order.id}</div>
                <div class="order-status status-${tabId}">${getStatusLabel(tabId)}</div>
            </div>
            
            <div class="order-route">
                <div class="route-point">
                    <span class="route-icon">üìç</span>
                    <span>${order.pickup_location}</span>
                </div>
                <div class="route-point">
                    <span class="route-icon">üéØ</span>
                    <span>${order.delivery_location}</span>
                </div>
            </div>
            
            <div class="order-description">${order.description}</div>
            
            <div class="order-meta">
                <span>üöõ ${getTruckTypeName(order.truck_type)}</span>
                <span>üìÖ ${formatDate(order.created_at)}</span>
                ${order.total_bids ? `<span>üí∞ ${order.total_bids} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>` : ''}
            </div>
            
            <div class="order-footer">
                ${order.my_bid_price ? `
                    <div class="my-bid-price">–ú–æ—è —Å—Ç–∞–≤–∫–∞: ${formatPrice(order.my_bid_price)}</div>
                ` : ''}
                ${tabId === 'open' ? `
                    <button class="btn btn-small btn-primary" onclick="openBidModal(${order.id}, '${order.pickup_location}', '${order.delivery_location}', '${order.description}')">
                        –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                ` : ''}
            </div>
        </div>
    `).join('');
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
function initModals() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const createOrderBtn = document.getElementById('create-order-btn');
    const createOrderModal = document.getElementById('create-order-modal');
    const createOrderForm = document.getElementById('create-order-form');
    const cancelOrderBtn = document.getElementById('cancel-order');
    
    if (createOrderBtn) {
        createOrderBtn.addEventListener('click', () => {
            createOrderModal.classList.remove('hidden');
        });
    }
    
    if (cancelOrderBtn) {
        cancelOrderBtn.addEventListener('click', () => {
            createOrderModal.classList.add('hidden');
            createOrderForm.reset();
        });
    }
    
    if (createOrderForm) {
        createOrderForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const orderData = {
                truck_type_id: document.getElementById('truck-type').value,
                pickup_location: document.getElementById('pickup-location').value,
                delivery_location: document.getElementById('delivery-location').value,
                description: document.getElementById('description').value,
                cargo_weight: document.getElementById('cargo-weight').value || null,
                cargo_volume: document.getElementById('cargo-volume').value || null,
                price: document.getElementById('price').value || null
            };
            
            try {
                await createOrder(orderData);
                createOrderModal.classList.add('hidden');
                createOrderForm.reset();
                showSuccess('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                loadTabData(currentTab);
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
            }
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const createBidForm = document.getElementById('create-bid-form');
    const cancelBidBtn = document.getElementById('cancel-bid');
    
    if (cancelBidBtn) {
        cancelBidBtn.addEventListener('click', () => {
            document.getElementById('create-bid-modal').classList.add('hidden');
            createBidForm.reset();
        });
    }
    
    if (createBidForm) {
        createBidForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const bidData = {
                order_id: currentOrderForBid,
                price: parseInt(document.getElementById('bid-price').value)
            };
            
            try {
                await createBid(bidData);
                document.getElementById('create-bid-modal').classList.add('hidden');
                createBidForm.reset();
                showSuccess('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                loadTabData(currentTab);
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay –∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫
    document.querySelectorAll('.modal-close, .modal-overlay').forEach(el => {
        el.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            if (modal) modal.classList.add('hidden');
        });
    });
}

async function loadTruckTypes() {
    try {
        const data = await fetchTruckTypes();
        const select = document.getElementById('truck-type');
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ placeholder)
        while (select.options.length > 1) {
            select.remove(1);
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º truckTypesMap –∏ —Å–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select
        data.forEach(category => {
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const optgroup = document.createElement('optgroup');
            optgroup.label = category.category;
            
            category.types.forEach(type => {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ map –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ getTruckTypeName
                truckTypesMap[type.id] = type.full_name || type.name;
                
                // –°–æ–∑–¥–∞–µ–º option
                const option = document.createElement('option');
                option.value = type.id;
                option.textContent = `${type.emoji} ${type.name}`;
                optgroup.appendChild(option);
            });
            
            select.appendChild(optgroup);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤:', error);
    }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
function getTruckTypeName(typeId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏–∑ map –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω" –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return truckTypesMap[typeId] || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

window.openBidModal = function(orderId, pickup, delivery, description) {
    currentOrderForBid = orderId;
    
    document.getElementById('bid-order-info').innerHTML = `
        <div class="order-route">
            <div class="route-point">
                <span class="route-icon">üìç</span>
                <span>${pickup}</span>
            </div>
            <div class="route-point">
                <span class="route-icon">üéØ</span>
                <span>${delivery}</span>
            </div>
        </div>
        <div class="order-description">${description}</div>
    `;
    
    document.getElementById('create-bid-modal').classList.remove('hidden');
};

window.viewOrderBids = async function(orderId) {
    try {
        const bids = await fetchOrderBids(orderId);
        const modal = document.getElementById('view-bids-modal');
        const bidsList = document.getElementById('bids-list');
        
        if (bids.length === 0) {
            bidsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üí∞</div>
                    <div class="empty-title">–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                </div>
            `;
        } else {
            bidsList.innerHTML = bids.map((bid, index) => `
                <div class="bid-card">
                    <div class="bid-header">
                        <div class="bid-driver">${index + 1}. ${bid.first_name} ${bid.last_name || ''}</div>
                        <div class="bid-price">${formatPrice(bid.price)}</div>
                    </div>
                    <div class="bid-time">üìÖ ${formatDate(bid.created_at)}</div>
                </div>
            `).join('');
        }
        
        modal.classList.remove('hidden');
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
    }
};

function showSuccess(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

function getStatusLabel(status) {
    const labels = {
        'searching': '–ü–æ–∏—Å–∫',
        'created': '–°–æ–∑–¥–∞–Ω–∞',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'open': '–û—Ç–∫—Ä—ã—Ç–∞',
        'my_bids': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ',
        'won': '–í—ã–∏–≥—Ä–∞–Ω–∞',
        'closed': '–ó–∞–∫—Ä—ã—Ç–∞'
    };
    return labels[status] || status;
}

function getEmptyMessage(tabId) {
    const messages = {
        'open': '–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å',
        'my_bids': '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
        'won': '–í—ã –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏',
        'closed': '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫'
    };
    return messages[tabId] || '';
}

function formatPrice(price) {
    if (!price || isNaN(price)) {
        return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    }
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(price);
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function showError(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}
