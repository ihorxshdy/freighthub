// Telegram Web App API
const tg = window.Telegram?.WebApp;

if (tg) {
    try {
        tg.expand();
        tg.ready();
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        tg.MainButton.hide();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', e);
    }
}

// –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π)
const API_BASE = './';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentTab = null;
let currentOrderForBid = null;
let truckTypesMap = {}; // –ú–∞–ø–ø–∏–Ω–≥ ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—à–∏–Ω—ã
let ordersCache = null; // –ö—ç—à –∑–∞–∫–∞–∑–æ–≤
let ordersCacheTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–∑ UTC –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
function formatLocalDateTime(utcDateString) {
    if (!utcDateString) return '';
    
    try {
        const date = new Date(utcDateString);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ –º–µ—Å—Ç–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
        const options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        };
        
        return date.toLocaleString('ru-RU', options);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', e);
        return utcDateString;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
function formatLocalDate(utcDateString) {
    if (!utcDateString) return '';
    
    try {
        const date = new Date(utcDateString);
        
        const options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        };
        
        return date.toLocaleDateString('ru-RU', options);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', e);
        return utcDateString;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
function getTelegramUser() {
    if (!tg || !tg.initDataUnsafe) {
        console.log('‚ö†Ô∏è tg –∏–ª–∏ initDataUnsafe –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return null;
    }
    
    console.log('üîç initDataUnsafe:', JSON.stringify(tg.initDataUnsafe));
    console.log('üîç initData:', tg.initData);
    
    // –°–ø–æ—Å–æ–± 1: –∏–∑ initDataUnsafe.user
    if (tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ initDataUnsafe.user');
        return tg.initDataUnsafe.user;
    }
    
    // –°–ø–æ—Å–æ–± 2: –ø–∞—Ä—Å–∏–º initData –≤—Ä—É—á–Ω—É—é
    if (tg.initData) {
        try {
            const params = new URLSearchParams(tg.initData);
            const userJson = params.get('user');
            if (userJson) {
                const user = JSON.parse(userJson);
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∏–∑ initData');
                return user;
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
        }
    }
    
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    const loadingText = document.getElementById('loading-text');
    
    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        applyTelegramTheme();
        
        loadingText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const telegramUser = getTelegramUser();
        
        if (!telegramUser || !telegramUser.id) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram WebApp', 'error');
            loadingText.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            showScreen('registration-screen');
            document.querySelector('.registration-form h2').textContent = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞';
            document.querySelector('.registration-form .description').innerHTML = 
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram.<br><br>' +
                '<strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /webapp –≤ –±–æ—Ç–µ</strong><br><br>' +
                '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.';
            return;
        }
        
        console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=' + telegramUser.id + ', –∏–º—è=' + telegramUser.first_name);
        loadingText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...`;
        
        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const user = await fetchUser(telegramUser.id);
        
        if (user) {
            currentUser = user;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('currentUser', JSON.stringify(user));
            console.log('üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ localStorage');
            showMainScreen();
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            console.log('üìù –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
            showRegistrationScreen(telegramUser);
        }
    } catch (error) {
        console.log('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// === –¢–ï–ú–ê TELEGRAM ===
function applyTelegramTheme() {
    const root = document.documentElement;
    
    if (tg.themeParams) {
        if (tg.themeParams.bg_color) root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color);
        if (tg.themeParams.text_color) root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color);
        if (tg.themeParams.hint_color) root.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color);
        if (tg.themeParams.link_color) root.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color);
        if (tg.themeParams.button_color) root.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color);
        if (tg.themeParams.button_text_color) root.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color);
        if (tg.themeParams.secondary_bg_color) root.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color);
    }
}

// === API –§–£–ù–ö–¶–ò–ò ===

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è fetch —Å timeout –∏ retry
async function fetchWithTimeout(url, options = {}, timeout = 10000, retries = 2) {
    let lastError;
    
    for (let attempt = 0; attempt <= retries; attempt++) {
        const controller = new AbortController();
        const id = setTimeout(() => controller.abort(), timeout);
        
        try {
            if (attempt > 0) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –¥–ª—è ${url}`, 'warning');
            }
            
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(id);
            return response;
        } catch (error) {
            clearTimeout(id);
            lastError = error;
            
            if (error.name === 'AbortError') {
                console.log(`‚è±Ô∏è Timeout (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries + 1})`, 'warning');
                if (attempt < retries) {
                    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
                    continue;
                }
                throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            }
            throw error;
        }
    }
    
    throw lastError;
}

async function fetchUser(telegramId) {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, telegram_id: ' + telegramId);
    const url = `${API_BASE}api/user?telegram_id=${telegramId}`;
    console.log('üì° URL: ' + url);
    
    try {
        const response = await fetchWithTimeout(url, {}, 20000, 2); // 20 —Å–µ–∫, 2 –ø–æ–≤—Ç–æ—Ä–∞
        console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ' + response.status);
        
        if (response.ok) {
            const userData = await response.json();
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ' + userData.name + ' (' + userData.role + ')');
            return userData;
        }
        
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
        return null;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message, 'error');
        return null;
    }
}

async function registerUser(userData) {
    const response = await fetchWithTimeout(API_BASE + 'api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
    }, 15000);
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
    
    return await response.json();
}

async function fetchTruckTypes() {
    const response = await fetchWithTimeout(`${API_BASE}api/truck-types`, {}, 10000);
    return await response.json();
}

async function fetchCustomerOrders(telegramId) {
    console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞, ID: ' + telegramId);
    const url = `${API_BASE}api/customer/orders?telegram_id=${telegramId}`;
    const startTime = Date.now();
    
    try {
        const response = await fetchWithTimeout(url, {}, 30000, 2); // 30 —Å–µ–∫, 2 –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
        const duration = Date.now() - startTime;
        console.log(`‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ ${duration}ms, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
        }
        const data = await response.json();
        const total = Object.values(data).reduce((sum, arr) => sum + arr.length, 0);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${total}`);
        return data;
    } catch (error) {
        const duration = Date.now() - startTime;
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞ ${duration}ms: ${error.message}`, 'error');
        throw error;
    }
}

async function fetchDriverOrders(telegramId) {
    console.log('üöó –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è, ID: ' + telegramId);
    const url = `${API_BASE}api/driver/orders?telegram_id=${telegramId}`;
    const startTime = Date.now();
    
    try {
        const response = await fetchWithTimeout(url, {}, 30000, 2); // 30 —Å–µ–∫, 2 –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
        const duration = Date.now() - startTime;
        console.log(`‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ ${duration}ms, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
        }
        const data = await response.json();
        const total = Object.values(data).reduce((sum, arr) => sum + arr.length, 0);
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${total}`);
        return data;
    } catch (error) {
        const duration = Date.now() - startTime;
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞ ${duration}ms: ${error.message}`, 'error');
        throw error;
    }
}

async function createOrder(orderData) {
    const response = await fetchWithTimeout(`${API_BASE}api/orders?telegram_id=${currentUser.telegram_id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
    }, 15000);
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    }
    
    return await response.json();
}

async function createBid(bidData) {
    const response = await fetchWithTimeout(`${API_BASE}api/bids?telegram_id=${currentUser.telegram_id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bidData)
    }, 15000);
    
    if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    }
    
    return await response.json();
}

async function fetchOrderBids(orderId) {
    const response = await fetchWithTimeout(`${API_BASE}api/orders/${orderId}/bids`, {}, 10000);
    return await response.json();
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(s => s.classList.add('hidden'));
    document.getElementById(screenId).classList.remove('hidden');
}

function showRegistrationScreen(telegramUser) {
    showScreen('registration-screen');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
}

async function showMainScreen() {
    showScreen('main-screen');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –î–û –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    await loadTruckTypes();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('user-name').textContent = currentUser.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const roleText = currentUser.role === 'customer' ? '–ó–∞–∫–∞–∑—á–∏–∫' : '–í–æ–¥–∏—Ç–µ–ª—å';
    const phoneText = currentUser.phone_number ? ` ‚Ä¢ ${currentUser.phone_number}` : '';
    // –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –º–∞—à–∏–Ω—ã
    const truckText = (currentUser.role === 'driver' && currentUser.truck_type) ? ` ‚Ä¢ ${getTruckTypeName(currentUser.truck_type)}` : '';
    document.getElementById('user-role').textContent = roleText + phoneText + truckText;
    document.body.className = `role-${currentUser.role}`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ Telegram
    const telegramUser = getTelegramUser();
    const avatar = document.getElementById('user-avatar');
    if (telegramUser && telegramUser.photo_url) {
        avatar.style.backgroundImage = `url(${telegramUser.photo_url})`;
        avatar.style.backgroundSize = 'cover';
        avatar.style.backgroundPosition = 'center';
        avatar.textContent = '';
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –∫–∞–∫ fallback
        const initial = (currentUser.name || '–ü').charAt(0).toUpperCase();
        avatar.textContent = initial;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏
    initTabs();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    initModals();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (currentTab && !document.hidden) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            const now = Date.now();
            if (now - ordersCacheTime >= CACHE_DURATION) {
                loadTabData(currentTab, true);
            }
        }
    }, CACHE_DURATION);
}

function initTabs() {
    const tabsNav = document.getElementById('tabs-nav');
    const tabContent = document.getElementById('tab-content');
    
    tabsNav.innerHTML = '';
    tabContent.innerHTML = '';
    
    let tabs = [];
    
    if (currentUser.role === 'customer') {
        tabs = [
            { id: 'searching', label: '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', icon: 'üîç' },
            { id: 'created', label: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ', icon: 'üìù' },
            { id: 'in_progress', label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', icon: 'üöö' },
            { id: 'closed', label: '–ó–∞–∫—Ä—ã—Ç—ã–µ', icon: '‚úÖ' }
        ];
    } else {
        tabs = [
            { id: 'open', label: '–û—Ç–∫—Ä—ã—Ç—ã–µ', icon: 'üìã' },
            { id: 'my_bids', label: '–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', icon: 'üí∞' },
            { id: 'won', label: '–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ', icon: 'üèÜ' },
            { id: 'in_progress', label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', icon: 'üöö' },
            { id: 'closed', label: '–ó–∞–∫—Ä—ã—Ç—ã–µ', icon: 'üìÅ' }
        ];
    }
    
    tabs.forEach((tab, index) => {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
        const tabBtn = document.createElement('button');
        tabBtn.className = 'tab' + (index === 0 ? ' active' : '');
        tabBtn.dataset.tab = tab.id;
        tabBtn.innerHTML = `${tab.icon} ${tab.label} <span class="tab-badge" id="badge-${tab.id}">0</span>`;
        tabBtn.addEventListener('click', () => switchTab(tab.id));
        tabsNav.appendChild(tabBtn);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
        const tabPane = document.createElement('div');
        tabPane.className = 'tab-pane' + (index === 0 ? ' active' : '');
        tabPane.id = `tab-${tab.id}`;
        tabContent.appendChild(tabPane);
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    currentTab = tabs[0].id;
    loadTabData(currentTab);
}

async function switchTab(tabId) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.tab === tabId);
    });
    
    document.querySelectorAll('.tab-pane').forEach(pane => {
        pane.classList.toggle('active', pane.id === `tab-${tabId}`);
    });
    
    currentTab = tabId;
    await loadTabData(tabId);
}

async function loadTabData(tabId, forceRefresh = false) {
    const tabPane = document.getElementById(`tab-${tabId}`);
    tabPane.innerHTML = '<div class="loading-container"><div class="spinner"></div><p style="margin-top: 10px; color: #666;">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p></div>';
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const now = Date.now();
        const cacheValid = ordersCache && !forceRefresh && (now - ordersCacheTime < CACHE_DURATION);
        
        let orders;
        if (cacheValid) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑—Ä–∞—Å—Ç: ' + Math.round((now - ordersCacheTime)/1000) + 's)');
            orders = ordersCache;
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            if (currentUser.role === 'customer') {
                orders = await fetchCustomerOrders(currentUser.telegram_id);
            } else {
                orders = await fetchDriverOrders(currentUser.telegram_id);
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            ordersCache = orders;
            ordersCacheTime = now;
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        if (currentUser.role === 'customer') {
            renderCustomerOrders(orders[tabId], tabPane, tabId);
        } else {
            renderDriverOrders(orders[tabId], tabPane, tabId);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        updateBadges(orders);
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        tabPane.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">‚ö†Ô∏è</div>
                <div class="empty-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                <p style="color: #666; margin: 10px 0;">${error.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}</p>
                <button onclick="refreshOrders()" style="margin-top: 15px; padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 8px; cursor: pointer;">
                    üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function refreshOrders() {
    ordersCache = null;
    ordersCacheTime = 0;
    loadTabData(currentTab, true);
}

function updateBadges(orders) {
    Object.keys(orders).forEach(key => {
        const badge = document.getElementById(`badge-${key}`);
        if (badge) {
            const count = orders[key].length;
            badge.textContent = count;
            badge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    });
}

function renderCustomerOrders(orders, container, tabId) {
    if (!orders || orders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì¶</div>
                <div class="empty-title">–ù–µ—Ç –∑–∞—è–≤–æ–∫</div>
                <div class="empty-description">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫—É</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = orders.map(order => `
        <div class="order-card">
            <div class="order-header">
                <div class="order-number">–ó–∞—è–≤–∫–∞ #${order.id}</div>
                <div class="order-status status-${tabId}">${getStatusLabel(tabId)}</div>
            </div>
            
            <div class="order-route">
                <div class="route-point">
                    <span class="route-icon">üìç</span>
                    <span>${order.pickup_address}</span>
                </div>
                <div class="route-point">
                    <span class="route-icon">üéØ</span>
                    <span>${order.delivery_address}</span>
                </div>
            </div>
            
            <div class="order-description">${order.cargo_description}</div>
            
            <div class="order-meta">
                <span>üöõ ${getTruckTypeName(order.truck_type)}</span>
                <span>üìÖ ${formatDate(order.created_at)}</span>
                ${order.delivery_date ? `<span>üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: ${order.delivery_date}</span>` : ''}
                ${order.max_price ? `<span>üí∞ –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${formatPrice(order.max_price)}</span>` : ''}
            </div>
            
            ${tabId === 'searching' ? `
                <div class="order-footer">
                    <div class="bids-info">
                        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <span class="bids-count">${order.bids_count || 0}</span>
                        ${order.min_bid_price ? `<br>–û—Ç <span class="min-price">${formatPrice(order.min_bid_price)}</span>` : ''}
                    </div>
                    <button class="btn btn-small btn-primary" onclick="viewOrderBids(${order.id})">
                        –°–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                </div>
            ` : ''}
            ${tabId === 'in_progress' ? `
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button class="btn btn-small btn-success" onclick="confirmOrderCompletion(${order.id})" style="flex: 1;">
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    </button>
                    <button class="btn btn-small btn-danger" onclick="cancelOrder(${order.id})" style="flex: 1;">
                        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                </div>
            ` : ''}
        </div>
    `).join('');
}

function renderDriverOrders(orders, container, tabId) {
    if (!orders || orders.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üöõ</div>
                <div class="empty-title">–ù–µ—Ç –∑–∞—è–≤–æ–∫</div>
                <div class="empty-description">${getEmptyMessage(tabId)}</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = orders.map(order => `
        <div class="order-card">
            <div class="order-header">
                <div class="order-number">–ó–∞—è–≤–∫–∞ #${order.id}</div>
                <div class="order-status status-${tabId}">${getStatusLabel(tabId)}</div>
            </div>
            
            <div class="order-route">
                <div class="route-point">
                    <span class="route-icon">üìç</span>
                    <span>${order.pickup_address}</span>
                </div>
                <div class="route-point">
                    <span class="route-icon">üéØ</span>
                    <span>${order.delivery_address}</span>
                </div>
            </div>
            
            <div class="order-description">${order.cargo_description}</div>
            
            <div class="order-meta">
                <span>üöõ ${getTruckTypeName(order.truck_type)}</span>
                <span>üìÖ ${formatDate(order.created_at)}</span>
                ${order.delivery_date ? `<span>üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: ${order.delivery_date}</span>` : ''}
                ${order.max_price ? `<span>üí∞ –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${formatPrice(order.max_price)}</span>` : ''}
                ${order.total_bids ? `<span>ÔøΩ ${order.total_bids} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>` : ''}
            </div>
            
            <div class="order-footer">
                ${order.my_bid_price ? `
                    <div class="my-bid-price">–ú–æ—è —Å—Ç–∞–≤–∫–∞: ${formatPrice(order.my_bid_price)}</div>
                ` : ''}
                ${tabId === 'open' ? `
                    <button class="btn btn-small btn-primary" onclick="openBidModal(${order.id}, '${order.pickup_address}', '${order.delivery_address}', '${order.cargo_description}')">
                        –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                ` : ''}
                ${tabId === 'in_progress' ? `
                    <div style="display: flex; gap: 10px; margin-top: 10px;">
                        <button class="btn btn-small btn-success" onclick="confirmOrderCompletion(${order.id})" style="flex: 1;">
                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        </button>
                        <button class="btn btn-small btn-danger" onclick="cancelOrder(${order.id})" style="flex: 1;">
                            –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                        </button>
                    </div>
                ` : ''}
            </div>
        </div>
    `).join('');
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
function initModals() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const createOrderBtn = document.getElementById('create-order-btn');
    const createOrderModal = document.getElementById('create-order-modal');
    const createOrderForm = document.getElementById('create-order-form');
    const cancelOrderBtn = document.getElementById('cancel-order');
    
    if (createOrderBtn) {
        createOrderBtn.addEventListener('click', () => {
            createOrderModal.classList.remove('hidden');
        });
    }
    
    if (cancelOrderBtn) {
        cancelOrderBtn.addEventListener('click', () => {
            createOrderModal.classList.add('hidden');
            createOrderForm.reset();
        });
    }
    
    if (createOrderForm) {
        createOrderForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const orderData = {
                truck_type_id: document.getElementById('truck-type').value,
                pickup_location: document.getElementById('pickup-location').value,
                delivery_location: document.getElementById('delivery-location').value,
                description: document.getElementById('description').value,
                cargo_weight: document.getElementById('cargo-weight').value || null,
                cargo_volume: document.getElementById('cargo-volume').value || null,
                price: document.getElementById('price').value || null,
                delivery_date: document.getElementById('delivery-date').value || null
            };
            
            try {
                await createOrder(orderData);
                createOrderModal.classList.add('hidden');
                createOrderForm.reset();
                showSuccess('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                refreshOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
            }
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const createBidForm = document.getElementById('create-bid-form');
    const cancelBidBtn = document.getElementById('cancel-bid');
    
    if (cancelBidBtn) {
        cancelBidBtn.addEventListener('click', () => {
            document.getElementById('create-bid-modal').classList.add('hidden');
            createBidForm.reset();
        });
    }
    
    if (createBidForm) {
        createBidForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const bidData = {
                order_id: currentOrderForBid,
                price: parseInt(document.getElementById('bid-price').value)
            };
            
            try {
                await createBid(bidData);
                document.getElementById('create-bid-modal').classList.add('hidden');
                createBidForm.reset();
                showSuccess('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                refreshOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay –∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫
    document.querySelectorAll('.modal-close, .modal-overlay').forEach(el => {
        el.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            if (modal) modal.classList.add('hidden');
        });
    });
}

async function loadTruckTypes() {
    // –ï—Å–ª–∏ truckTypesMap —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (Object.keys(truckTypesMap).length > 0) {
        return;
    }
    
    try {
        const data = await fetchTruckTypes();
        const select = document.getElementById('truck-type');
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ placeholder)
        while (select.options.length > 1) {
            select.remove(1);
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º truckTypesMap –∏ —Å–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select
        data.forEach(category => {
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const optgroup = document.createElement('optgroup');
            optgroup.label = category.name; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—ã–ª–æ category.category
            
            category.types.forEach(type => {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ map –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ getTruckTypeName
                truckTypesMap[type.id] = type.full_name || type.name;
                
                // –°–æ–∑–¥–∞–µ–º option
                const option = document.createElement('option');
                option.value = type.id;
                option.textContent = type.name; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π emoji
                optgroup.appendChild(option);
            });
            
            select.appendChild(optgroup);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤:', error);
    }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
function getTruckTypeName(typeId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏–∑ map –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω" –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return truckTypesMap[typeId] || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

window.openBidModal = function(orderId, pickup, delivery, description) {
    currentOrderForBid = orderId;
    
    document.getElementById('bid-order-info').innerHTML = `
        <div class="order-route">
            <div class="route-point">
                <span class="route-icon">üìç</span>
                <span>${pickup}</span>
            </div>
            <div class="route-point">
                <span class="route-icon">üéØ</span>
                <span>${delivery}</span>
            </div>
        </div>
        <div class="order-description">${description}</div>
    `;
    
    document.getElementById('create-bid-modal').classList.remove('hidden');
};

window.viewOrderBids = async function(orderId) {
    try {
        const bids = await fetchOrderBids(orderId);
        const modal = document.getElementById('view-bids-modal');
        const bidsList = document.getElementById('bids-list');
        
        if (bids.length === 0) {
            bidsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üí∞</div>
                    <div class="empty-title">–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
                </div>
            `;
        } else {
            bidsList.innerHTML = bids.map((bid, index) => `
                <div class="bid-card">
                    <div class="bid-header">
                        <div class="bid-driver">${index + 1}. ${bid.name || '–í–æ–¥–∏—Ç–µ–ª—å'}</div>
                        <div class="bid-price">${formatPrice(bid.price)}</div>
                    </div>
                    <div class="bid-meta">
                        <span> ${formatDate(bid.created_at)}</span>
                    </div>
                    <button class="btn btn-primary" onclick="selectWinner(${orderId}, ${bid.id})" style="width: 100%; margin-top: 10px;">
                        –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
                    </button>
                </div>
            `).join('');
        }
        
        modal.classList.remove('hidden');
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
    }
};

window.selectWinner = async function(orderId, bidId) {
    try {
        const response = await fetchWithTimeout(`${API_BASE}api/orders/${orderId}/select-winner`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                bid_id: bidId
            })
        }, 15000);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
        }
        
        document.getElementById('view-bids-modal').classList.add('hidden');
        showSuccess('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω! –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"');
        refreshOrders();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
    }
};

window.confirmOrderCompletion = async function(orderId) {
    try {
        const response = await fetchWithTimeout(`${API_BASE}api/orders/${orderId}/confirm-completion`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id
            })
        }, 15000);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        }
        
        showSuccess('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!');
        refreshOrders();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    }
};

window.cancelOrder = async function(orderId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?')) {
        return;
    }
    
    try {
        const response = await fetchWithTimeout(`${API_BASE}api/orders/${orderId}/cancel`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id
            })
        }, 15000);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞');
        }
        
        showSuccess('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
        refreshOrders();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞');
    }
};

function showSuccess(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

function getStatusLabel(status) {
    const labels = {
        'searching': '–ü–æ–∏—Å–∫',
        'created': '–°–æ–∑–¥–∞–Ω–∞',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'open': '–û—Ç–∫—Ä—ã—Ç–∞',
        'my_bids': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ',
        'won': '–í—ã–∏–≥—Ä–∞–Ω–∞',
        'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'closed': '–ó–∞–∫—Ä—ã—Ç–∞'
    };
    return labels[status] || status;
}

function getEmptyMessage(tabId) {
    const messages = {
        'open': '–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å',
        'my_bids': '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
        'won': '–í—ã –µ—â–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏',
        'closed': '–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫'
    };
    return messages[tabId] || '';
}

function formatPrice(price) {
    if (!price || isNaN(price)) {
        return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    }
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(price);
}

function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function showError(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

// –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function contactAdmin() {
    const message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—Ç–µ–ª –±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º FreightHub.";
    const url = `https://t.me/mosdefkweli?text=${encodeURIComponent(message)}`;
    
    if (tg && tg.openTelegramLink) {
        tg.openTelegramLink(url);
    } else {
        window.open(url, '_blank');
    }
}

