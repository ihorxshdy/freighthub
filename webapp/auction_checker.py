"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ cron –∑–∞–¥–∞—á–∞
"""
import sqlite3
from webhook_client import notify_auction_complete, notify_auction_no_bids
from truck_config import DATABASE_PATH


def check_expired_auctions():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã
    –î–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    """
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
    expired_orders = cursor.execute('''
        SELECT id, customer_id, truck_type_id, description, delivery_location, price
        FROM orders
        WHERE status = 'active'
        AND datetime(created_at, '+30 minutes') <= datetime('now')
    ''').fetchall()
    
    for order in expired_orders:
        order_id = order['id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
        bids = cursor.execute('''
            SELECT id, driver_id, bid_amount
            FROM bids
            WHERE order_id = ? AND status = 'pending'
            ORDER BY bid_amount ASC
        ''', (order_id,)).fetchall()
        
        if bids:
            # –ï—Å—Ç—å —Å—Ç–∞–≤–∫–∏ - –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
            winning_bid = bids[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = cursor.execute('''
                SELECT id, telegram_id, first_name, phone
                FROM users
                WHERE id = ?
            ''', (winning_bid['driver_id'],)).fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
            customer = cursor.execute('''
                SELECT id, telegram_id, phone
                FROM users
                WHERE id = ?
            ''', (order['customer_id'],)).fetchone()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            cursor.execute('''
                UPDATE orders
                SET status = 'assigned', assigned_driver_id = ?
                WHERE id = ?
            ''', (winning_bid['driver_id'], order_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–∏–≥—Ä–∞–≤—à–µ–π —Å—Ç–∞–≤–∫–∏
            cursor.execute('''
                UPDATE bids
                SET status = 'accepted'
                WHERE id = ?
            ''', (winning_bid['id'],))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —Å—Ç–∞–≤–æ–∫
            for bid in bids[1:]:
                cursor.execute('''
                    UPDATE bids
                    SET status = 'rejected'
                    WHERE id = ?
                ''', (bid['id'],))
            
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                notify_auction_complete(
                    order_id=order_id,
                    winner_user_id=winner['telegram_id'],
                    winning_price=winning_bid['bid_amount'],
                    cargo_description=order['description'],
                    delivery_address=order['delivery_location'],
                    customer_user_id=customer['telegram_id'],
                    customer_phone=customer['phone'],
                    driver_phone=winner['phone']
                )
                print(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: –∑–∞–∫–∞–∑ {order_id}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {winner['first_name']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        
        else:
            # –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
            cursor.execute('''
                UPDATE orders
                SET status = 'cancelled'
                WHERE id = ?
            ''', (order_id,))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
            customer = cursor.execute('''
                SELECT telegram_id
                FROM users
                WHERE id = ?
            ''', (order['customer_id'],)).fetchone()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                notify_auction_no_bids(
                    order_id=order_id,
                    customer_user_id=customer['telegram_id'],
                    cargo_description=order['description']
                )
                print(f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫: –∑–∞–∫–∞–∑ {order_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    
    conn.close()
    return len(expired_orders)


if __name__ == '__main__':
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É:
    
    * * * * * cd /path/to/webapp && python auction_checker.py
    
    –ò–ª–∏ —á–µ—Ä–µ–∑ systemd timer, –∏–ª–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ Render
    """
    import time
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤...")
    
    while True:
        try:
            count = check_expired_auctions()
            if count > 0:
                print(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {count}")
            else:
                print(".", end="", flush=True)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)
